import { __decorate } from "tslib";
import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';
let NguCarouselItemDirective = class NguCarouselItemDirective {
};
NguCarouselItemDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[NguCarouselItem]'
    })
], NguCarouselItemDirective);
export { NguCarouselItemDirective };
let NguCarouselNextDirective = class NguCarouselNextDirective {
};
NguCarouselNextDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[NguCarouselNext]'
    })
], NguCarouselNextDirective);
export { NguCarouselNextDirective };
let NguCarouselPrevDirective = class NguCarouselPrevDirective {
};
NguCarouselPrevDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[NguCarouselPrev]'
    })
], NguCarouselPrevDirective);
export { NguCarouselPrevDirective };
let NguCarouselPointDirective = class NguCarouselPointDirective {
};
NguCarouselPointDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[NguCarouselPoint]'
    })
], NguCarouselPointDirective);
export { NguCarouselPointDirective };
let NguCarouselDefDirective = class NguCarouselDefDirective {
    constructor(template) {
        this.template = template;
    }
};
NguCarouselDefDirective.ctorParameters = () => [
    { type: TemplateRef }
];
NguCarouselDefDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[nguCarouselDef]'
    })
], NguCarouselDefDirective);
export { NguCarouselDefDirective };
let NguCarouselOutlet = 
// tslint:disable-next-line:directive-class-suffix
class NguCarouselOutlet {
    constructor(viewContainer) {
        this.viewContainer = viewContainer;
    }
};
NguCarouselOutlet.ctorParameters = () => [
    { type: ViewContainerRef }
];
NguCarouselOutlet = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[nguCarouselOutlet]'
    })
    // tslint:disable-next-line:directive-class-suffix
], NguCarouselOutlet);
export { NguCarouselOutlet };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd1LWNhcm91c2VsLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3UvY2Fyb3VzZWwvIiwic291cmNlcyI6WyJsaWIvbmd1LWNhcm91c2VsLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFNekUsSUFBYSx3QkFBd0IsR0FBckMsTUFBYSx3QkFBd0I7Q0FBRyxDQUFBO0FBQTNCLHdCQUF3QjtJQUpwQyxTQUFTLENBQUM7UUFDVCw4Q0FBOEM7UUFDOUMsUUFBUSxFQUFFLG1CQUFtQjtLQUM5QixDQUFDO0dBQ1csd0JBQXdCLENBQUc7U0FBM0Isd0JBQXdCO0FBTXJDLElBQWEsd0JBQXdCLEdBQXJDLE1BQWEsd0JBQXdCO0NBTXBDLENBQUE7QUFOWSx3QkFBd0I7SUFKcEMsU0FBUyxDQUFDO1FBQ1QsOENBQThDO1FBQzlDLFFBQVEsRUFBRSxtQkFBbUI7S0FDOUIsQ0FBQztHQUNXLHdCQUF3QixDQU1wQztTQU5ZLHdCQUF3QjtBQVlyQyxJQUFhLHdCQUF3QixHQUFyQyxNQUFhLHdCQUF3QjtDQUdwQyxDQUFBO0FBSFksd0JBQXdCO0lBSnBDLFNBQVMsQ0FBQztRQUNULDhDQUE4QztRQUM5QyxRQUFRLEVBQUUsbUJBQW1CO0tBQzlCLENBQUM7R0FDVyx3QkFBd0IsQ0FHcEM7U0FIWSx3QkFBd0I7QUFTckMsSUFBYSx5QkFBeUIsR0FBdEMsTUFBYSx5QkFBeUI7Q0FBRyxDQUFBO0FBQTVCLHlCQUF5QjtJQUpyQyxTQUFTLENBQUM7UUFDVCw4Q0FBOEM7UUFDOUMsUUFBUSxFQUFFLG9CQUFvQjtLQUMvQixDQUFDO0dBQ1cseUJBQXlCLENBQUc7U0FBNUIseUJBQXlCO0FBTXRDLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBR2xDLFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUcsQ0FBQztDQUNsRCxDQUFBOztZQUQ4QixXQUFXOztBQUg3Qix1QkFBdUI7SUFKbkMsU0FBUyxDQUFDO1FBQ1QsOENBQThDO1FBQzlDLFFBQVEsRUFBRSxrQkFBa0I7S0FDN0IsQ0FBQztHQUNXLHVCQUF1QixDQUluQztTQUpZLHVCQUF1QjtBQVdwQyxJQUFhLGlCQUFpQjtBQUQ5QixrREFBa0Q7QUFDbEQsTUFBYSxpQkFBaUI7SUFDNUIsWUFBbUIsYUFBK0I7UUFBL0Isa0JBQWEsR0FBYixhQUFhLENBQWtCO0lBQUcsQ0FBQztDQUN2RCxDQUFBOztZQURtQyxnQkFBZ0I7O0FBRHZDLGlCQUFpQjtJQUw3QixTQUFTLENBQUM7UUFDVCw4Q0FBOEM7UUFDOUMsUUFBUSxFQUFFLHFCQUFxQjtLQUNoQyxDQUFDO0lBQ0Ysa0RBQWtEO0dBQ3JDLGlCQUFpQixDQUU3QjtTQUZZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcclxuICBzZWxlY3RvcjogJ1tOZ3VDYXJvdXNlbEl0ZW1dJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd1Q2Fyb3VzZWxJdGVtRGlyZWN0aXZlIHt9XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICdbTmd1Q2Fyb3VzZWxOZXh0XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5ndUNhcm91c2VsTmV4dERpcmVjdGl2ZSB7XHJcbiAgLy8gQEhvc3RCaW5kaW5nKCdkaXNhYmxlZCcpIGRpc2FibGVkOiBib29sZWFuO1xyXG4gIC8vIEBIb3N0QmluZGluZygnc3R5bGUuZGlzcGxheScpIGRpc3BsYXkgPSAnYmxvY2snO1xyXG4gIC8vIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcclxuICAvLyBvbkNsaWNrKCkge1xyXG4gIC8vIH1cclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxyXG4gIHNlbGVjdG9yOiAnW05ndUNhcm91c2VsUHJldl0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3VDYXJvdXNlbFByZXZEaXJlY3RpdmUge1xyXG4gIC8vIEBIb3N0QmluZGluZygnZGlzYWJsZWQnKSBkaXNhYmxlZDogYm9vbGVhbjtcclxuICAvLyBASG9zdEJpbmRpbmcoJ3N0eWxlLmRpc3BsYXknKSBkaXNwbGF5ID0gJ2Jsb2NrJztcclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxyXG4gIHNlbGVjdG9yOiAnW05ndUNhcm91c2VsUG9pbnRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd1Q2Fyb3VzZWxQb2ludERpcmVjdGl2ZSB7fVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxyXG4gIHNlbGVjdG9yOiAnW25ndUNhcm91c2VsRGVmXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5ndUNhcm91c2VsRGVmRGlyZWN0aXZlPFQ+IHtcclxuICB3aGVuOiAoaW5kZXg6IG51bWJlciwgbm9kZURhdGE6IFQpID0+IGJvb2xlYW47XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55Pikge31cclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxyXG4gIHNlbGVjdG9yOiAnW25ndUNhcm91c2VsT3V0bGV0XSdcclxufSlcclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1jbGFzcy1zdWZmaXhcclxuZXhwb3J0IGNsYXNzIE5ndUNhcm91c2VsT3V0bGV0IHtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZikge31cclxufVxyXG4iXX0=