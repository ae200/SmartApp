{"version":3,"file":"ngu-carousel.component.d.ts","sources":["C:/Users/Administrator/Desktop/work/angular/smartapp/node_modules/@ngu/carousel/lib/ngu-carousel/ngu-carousel.component.d.ts"],"sourcesContent":["import { AfterContentInit, AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, IterableChanges, IterableDiffer, IterableDiffers, OnDestroy, OnInit, Renderer2, TrackByFunction } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { NguCarouselOutlet } from './../ngu-carousel.directive';\r\nimport { NguCarouselStore } from './ngu-carousel';\r\nexport declare class NguCarousel<T> extends NguCarouselStore implements OnInit, AfterContentInit, AfterViewInit, OnDestroy, DoCheck {\r\n    private _el;\r\n    private _renderer;\r\n    private _differs;\r\n    private platformId;\r\n    private cdr;\r\n    _dataSubscription: Subscription;\r\n    _dataSource: any;\r\n    _dataDiffer: IterableDiffer<{}>;\r\n    styleid: string;\r\n    private directionSym;\r\n    private carouselCssNode;\r\n    private pointIndex;\r\n    private withAnim;\r\n    activePoint: number;\r\n    isHovered: boolean;\r\n    private inputs;\r\n    private carouselLoad;\r\n    private onMove;\r\n    arrayChanges: IterableChanges<{}>;\r\n    carouselInt: Subscription;\r\n    listener1: () => void;\r\n    listener2: () => void;\r\n    listener3: () => void;\r\n    listener4: () => void;\r\n    get dataSource(): any;\r\n    set dataSource(data: any);\r\n    private _defaultNodeDef;\r\n    private _defDirec;\r\n    _nodeOutlet: NguCarouselOutlet;\r\n    /** The setter is used to catch the button if the button has ngIf\r\n     * issue id #91\r\n     */\r\n    set nextBtn(btn: ElementRef);\r\n    /** The setter is used to catch the button if the button has ngIf\r\n     * issue id #91\r\n     */\r\n    set prevBtn(btn: ElementRef);\r\n    private carouselMain1;\r\n    private nguItemsContainer;\r\n    private touchContainer;\r\n    private _intervalController$;\r\n    private carousel;\r\n    private onResize;\r\n    private onScrolling;\r\n    pointNumbers: Array<any>;\r\n    /**\r\n     * Tracking function that will be used to check the differences in data changes. Used similarly\r\n     * to `ngFor` `trackBy` function. Optimize Items operations by identifying a Items based on its data\r\n     * relative to the function to know if a Items should be added/removed/moved.\r\n     * Accepts a function that takes two parameters, `index` and `item`.\r\n     */\r\n    get trackBy(): TrackByFunction<T>;\r\n    set trackBy(fn: TrackByFunction<T>);\r\n    private _trackByFn;\r\n    constructor(_el: ElementRef, _renderer: Renderer2, _differs: IterableDiffers, platformId: object, cdr: ChangeDetectorRef);\r\n    ngOnInit(): void;\r\n    ngDoCheck(): void;\r\n    private _switchDataSource;\r\n    private _observeRenderChanges;\r\n    private renderNodeChanges;\r\n    /**\r\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\r\n     * e.g. first/last/even/odd.\r\n     */\r\n    private _updateItemIndexContext;\r\n    private _getNodeDef;\r\n    ngAfterViewInit(): void;\r\n    ngAfterContentInit(): void;\r\n    private _inputValidation;\r\n    ngOnDestroy(): void;\r\n    private _onResizing;\r\n    /** Get Touch input */\r\n    private _touch;\r\n    /** handle touch input */\r\n    private _touchHandling;\r\n    private _setTouchTransfrom;\r\n    private _setTransformFromTouch;\r\n    /** this fn used to disable the interval when it is not on the viewport */\r\n    private _onWindowScrolling;\r\n    /** store data based on width of the screen for the carousel */\r\n    private _storeCarouselData;\r\n    /** Used to reset the carousel */\r\n    reset(withOutAnimation?: boolean): void;\r\n    /** Init carousel point */\r\n    private _carouselPoint;\r\n    /** change the active point in carousel */\r\n    private _carouselPointActiver;\r\n    /** this function is used to scoll the carousel when point is clicked */\r\n    moveTo(slide: number, withOutAnimation?: boolean): void;\r\n    /** set the style of the carousel based the inputs data */\r\n    private _carouselSize;\r\n    /** logic to scroll the carousel step 1 */\r\n    private _carouselScrollOne;\r\n    /** logic to scroll the carousel step 2 */\r\n    private _carouselScrollTwo;\r\n    /** boolean function for making isFirst and isLast */\r\n    private _btnBoolean;\r\n    private _transformString;\r\n    /** set the transform style to scroll the carousel  */\r\n    private _transformStyle;\r\n    /** this will trigger the carousel to load the items */\r\n    private _carouselLoadTrigger;\r\n    /** generate Class for each carousel to set specific style */\r\n    private _generateID;\r\n    /** handle the auto slide */\r\n    private _carouselInterval;\r\n    private _updateItemIndexContextAni;\r\n    /** animate the carousel items */\r\n    private _carouselAnimator;\r\n    private _removeAnimations;\r\n    /** Short form for setElementStyle */\r\n    private _setStyle;\r\n    /** For generating style tag */\r\n    private _createStyleElem;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmHA;"}