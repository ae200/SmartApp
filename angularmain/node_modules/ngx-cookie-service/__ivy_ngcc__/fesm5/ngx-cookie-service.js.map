{"version":3,"sources":["C:/Users/Administrator/Desktop/work/angular/smartapp/node_modules/ngx-cookie-service/fesm5/ngx-cookie-service.js"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAsJgC,AAIzB;;;;;;;;;;;;;;;;uMAEe","file":"ngx-cookie-service.js","sourcesContent":["import { __read, __decorate, __param } from 'tslib';\nimport { Inject, InjectionToken, PLATFORM_ID, ɵɵdefineInjectable, ɵɵinject, Injectable } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common';\n\nvar CookieService = /** @class */ (function () {\n    function CookieService(\n    // The type `Document` may not be used here. Although a fix is on its way,\n    // we will go with `any` for now to support Angular 2.4.x projects.\n    // Issue: https://github.com/angular/angular/issues/12631\n    // Fix: https://github.com/angular/angular/pull/14894\n    document, \n    // Get the `PLATFORM_ID` so we can check if we're in a browser.\n    platformId) {\n        this.document = document;\n        this.platformId = platformId;\n        this.documentIsAccessible = isPlatformBrowser(this.platformId);\n    }\n    /**\n     * @param name Cookie name\n     * @returns boolean - whether cookie with specified name exists\n     */\n    CookieService.prototype.check = function (name) {\n        if (!this.documentIsAccessible) {\n            return false;\n        }\n        name = encodeURIComponent(name);\n        var regExp = this.getCookieRegExp(name);\n        var exists = regExp.test(this.document.cookie);\n        return exists;\n    };\n    /**\n     * @param name Cookie name\n     * @returns property value\n     */\n    CookieService.prototype.get = function (name) {\n        if (this.documentIsAccessible && this.check(name)) {\n            name = encodeURIComponent(name);\n            var regExp = this.getCookieRegExp(name);\n            var result = regExp.exec(this.document.cookie);\n            return this.safeDecodeURIComponent(result[1]);\n        }\n        else {\n            return '';\n        }\n    };\n    /**\n     * @returns all the cookies in json\n     */\n    CookieService.prototype.getAll = function () {\n        var _this = this;\n        if (!this.documentIsAccessible) {\n            return {};\n        }\n        var cookies = {};\n        var document = this.document;\n        if (document.cookie && document.cookie !== '') {\n            document.cookie.split(';').forEach(function (currentCookie) {\n                var _a = __read(currentCookie.split('='), 2), cookieName = _a[0], cookieValue = _a[1];\n                cookies[_this.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = _this.safeDecodeURIComponent(cookieValue);\n            });\n        }\n        return cookies;\n    };\n    /**\n     * @param name     Cookie name\n     * @param value    Cookie value\n     * @param expires  Number of days until the cookies expires or an actual `Date`\n     * @param path     Cookie path\n     * @param domain   Cookie domain\n     * @param secure   Secure flag\n     * @param sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`\n     */\n    CookieService.prototype.set = function (name, value, expires, path, domain, secure, sameSite) {\n        if (sameSite === void 0) { sameSite = 'Lax'; }\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        var cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n        if (expires) {\n            if (typeof expires === 'number') {\n                var dateExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);\n                cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n            }\n            else {\n                cookieString += 'expires=' + expires.toUTCString() + ';';\n            }\n        }\n        if (path) {\n            cookieString += 'path=' + path + ';';\n        }\n        if (domain) {\n            cookieString += 'domain=' + domain + ';';\n        }\n        if (secure === false && sameSite === 'None') {\n            secure = true;\n            console.warn(\"[ngx-cookie-service] Cookie \" + name + \" was forced with secure flag because sameSite=None.\" +\n                \"More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130\");\n        }\n        if (secure) {\n            cookieString += 'secure;';\n        }\n        cookieString += 'sameSite=' + sameSite + ';';\n        this.document.cookie = cookieString;\n    };\n    /**\n     * @param name   Cookie name\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n    CookieService.prototype.delete = function (name, path, domain, secure, sameSite) {\n        if (sameSite === void 0) { sameSite = 'Lax'; }\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        this.set(name, '', new Date('Thu, 01 Jan 1970 00:00:01 GMT'), path, domain, secure, sameSite);\n    };\n    /**\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n    CookieService.prototype.deleteAll = function (path, domain, secure, sameSite) {\n        if (sameSite === void 0) { sameSite = 'Lax'; }\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        var cookies = this.getAll();\n        for (var cookieName in cookies) {\n            if (cookies.hasOwnProperty(cookieName)) {\n                this.delete(cookieName, path, domain, secure, sameSite);\n            }\n        }\n    };\n    /**\n     * @param name Cookie name\n     * @returns property RegExp\n     */\n    CookieService.prototype.getCookieRegExp = function (name) {\n        var escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/ig, '\\\\$1');\n        return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n    };\n    CookieService.prototype.safeDecodeURIComponent = function (encodedURIComponent) {\n        try {\n            return decodeURIComponent(encodedURIComponent);\n        }\n        catch (_a) {\n            // probably it is not uri encoded. return as is\n            return encodedURIComponent;\n        }\n    };\n    CookieService.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: InjectionToken, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n    ]; };\n    CookieService.ɵprov = ɵɵdefineInjectable({ factory: function CookieService_Factory() { return new CookieService(ɵɵinject(DOCUMENT), ɵɵinject(PLATFORM_ID)); }, token: CookieService, providedIn: \"root\" });\n    CookieService = __decorate([\n        Injectable({\n            providedIn: 'root'\n        }),\n        __param(0, Inject(DOCUMENT)),\n        __param(1, Inject(PLATFORM_ID))\n    ], CookieService);\n    return CookieService;\n}());\n\n/*\n * Public API Surface of ngx-cookie-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CookieService };\n"]}