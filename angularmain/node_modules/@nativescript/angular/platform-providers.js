Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var frame_1 = require("tns-core-modules/ui/frame");
var page_1 = require("tns-core-modules/ui/page");
var platform_1 = require("tns-core-modules/platform");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
exports.APP_ROOT_VIEW = new core_1.InjectionToken("App Root View");
exports.DEVICE = new core_1.InjectionToken("platform device");
exports.PAGE_FACTORY = new core_1.InjectionToken("page factory");
var _rootPageRef;
function setRootPage(page) {
    _rootPageRef = new WeakRef(page);
}
exports.setRootPage = setRootPage;
function getRootPage() {
    return _rootPageRef && _rootPageRef.get();
}
exports.getRootPage = getRootPage;
// Use an exported function to make the AoT compiler happy.
function getDefaultPage() {
    var rootPage = getRootPage();
    if (rootPage instanceof page_1.Page) {
        return rootPage;
    }
    var frame = frame_1.Frame.topmost();
    if (frame && frame.currentPage) {
        return frame.currentPage;
    }
    return null;
}
exports.getDefaultPage = getDefaultPage;
exports.defaultPageProvider = { provide: page_1.Page, useFactory: getDefaultPage };
// Use an exported function to make the AoT compiler happy.
function getDefaultFrame() {
    return frame_1.Frame.topmost();
}
exports.getDefaultFrame = getDefaultFrame;
exports.defaultFrameProvider = { provide: frame_1.Frame, useFactory: getDefaultFrame };
// Use an exported function to make the AoT compiler happy.
function getDefaultDevice() {
    return platform_1.device;
}
exports.getDefaultDevice = getDefaultDevice;
exports.defaultDeviceProvider = { provide: exports.DEVICE, useFactory: getDefaultDevice };
exports.defaultPageFactory = function (_opts) {
    return new page_1.Page();
};
exports.defaultPageFactoryProvider = { provide: exports.PAGE_FACTORY, useValue: exports.defaultPageFactory };
var FrameService = /** @class */ (function () {
    function FrameService() {
    }
    // TODO: Add any methods that are needed to handle frame/page navigation
    FrameService.prototype.getFrame = function () {
        var topmostFrame = frame_1.Frame.topmost();
        return topmostFrame;
    };
    FrameService = __decorate([
        core_1.Injectable()
    ], FrameService);
    return FrameService;
}());
exports.FrameService = FrameService;
var PageService = /** @class */ (function () {
    function PageService(page) {
        this.page = page;
        this._inPage$ = new rxjs_1.BehaviorSubject(false);
        this._pageEvents$ = new rxjs_1.Subject();
        if (this.page) {
            this.page.on("navigatedFrom", this.pageEvent, this);
            this.page.on("navigatedTo", this.pageEvent, this);
            this.page.on("navigatingFrom", this.pageEvent, this);
            this.page.on("navigatingTo", this.pageEvent, this);
        }
    }
    Object.defineProperty(PageService.prototype, "inPage", {
        get: function () { return this._inPage$.value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageService.prototype, "inPage$", {
        get: function () { return this._inPage$.pipe(operators_1.distinctUntilChanged()); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageService.prototype, "pageEvents$", {
        get: function () { return this._pageEvents$.asObservable(); },
        enumerable: true,
        configurable: true
    });
    PageService.prototype.ngOnDestroy = function () {
        if (this.page) {
            this.page.off("navigatedFrom", this.pageEvent, this);
            this.page.off("navigatedTo", this.pageEvent, this);
            this.page.off("navigatingFrom", this.pageEvent, this);
            this.page.off("navigatingTo", this.pageEvent, this);
        }
        this._inPage$.complete();
        this._pageEvents$.complete();
    };
    PageService.prototype.pageEvent = function (evt) {
        this._pageEvents$.next(evt);
        switch (evt.eventName) {
            case "navigatedTo":
                this._inPage$.next(true);
                break;
            case "navigatedFrom":
                this._inPage$.next(false);
                break;
            default:
        }
    };
    PageService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [page_1.Page])
    ], PageService);
    return PageService;
}());
exports.PageService = PageService;
//# sourceMappingURL=platform-providers.js.map