import { __decorate } from 'tslib';
import { Pipe, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';

import * as ɵngcc0 from '@angular/core';
var SafePipe = /** @class */ (function () {
    function SafePipe(sanitizer) {
        this.sanitizer = sanitizer;
    }
    SafePipe.prototype.transform = function (value, type) {
        switch (type) {
            case 'html':
                return this.sanitizer.bypassSecurityTrustHtml(value);
            case 'style':
                return this.sanitizer.bypassSecurityTrustStyle(value);
            case 'script':
                return this.sanitizer.bypassSecurityTrustScript(value);
            case 'url':
                return this.sanitizer.bypassSecurityTrustUrl(value);
            case 'resourceUrl':
                return this.sanitizer.bypassSecurityTrustResourceUrl(value);
            default:
                throw new Error("SafePipe unable to bypass security for invalid type: " + type);
        }
    };
    SafePipe.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
SafePipe.ɵfac = function SafePipe_Factory(t) { return new (t || SafePipe)(ɵngcc0.ɵɵdirectiveInject(DomSanitizer)); };
SafePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "safe", type: SafePipe, pure: true });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(SafePipe, [{
        type: Pipe,
        args: [{
                name: 'safe',
                pure: true
            }]
    }], function () { return [{ type: DomSanitizer }]; }, { sanitizer: [], transform: [] });
    return SafePipe;
}());

var SafePipeModule = /** @class */ (function () {
    function SafePipeModule() {
    }
SafePipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SafePipeModule });
SafePipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SafePipeModule_Factory(t) { return new (t || SafePipeModule)(); } });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(SafePipeModule, { declarations: [SafePipe], exports: [SafePipe] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(SafePipeModule, [{
        type: NgModule,
        args: [{
                declarations: [SafePipe],
                exports: [SafePipe]
            }]
    }], function () { return []; }, null);
    return SafePipeModule;
}());

/*
 * Public API Surface of safe-pipe
 */

/**
 * Generated bundle index. Do not edit.
 */

export { SafePipeModule, SafePipe as ɵa };

export {SafePipe};
//# sourceMappingURL=safe-pipe.js.map