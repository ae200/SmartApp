import { __decorate } from 'tslib';
import { Pipe, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';

let SafePipe = class SafePipe {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    transform(value, type) {
        switch (type) {
            case 'html':
                return this.sanitizer.bypassSecurityTrustHtml(value);
            case 'style':
                return this.sanitizer.bypassSecurityTrustStyle(value);
            case 'script':
                return this.sanitizer.bypassSecurityTrustScript(value);
            case 'url':
                return this.sanitizer.bypassSecurityTrustUrl(value);
            case 'resourceUrl':
                return this.sanitizer.bypassSecurityTrustResourceUrl(value);
            default:
                throw new Error(`SafePipe unable to bypass security for invalid type: ${type}`);
        }
    }
};
SafePipe.ctorParameters = () => [
    { type: DomSanitizer }
];
SafePipe = __decorate([
    Pipe({
        name: 'safe',
        pure: true
    })
], SafePipe);

let SafePipeModule = class SafePipeModule {
};
SafePipeModule = __decorate([
    NgModule({
        declarations: [SafePipe],
        exports: [SafePipe]
    })
], SafePipeModule);

/*
 * Public API Surface of safe-pipe
 */

/**
 * Generated bundle index. Do not edit.
 */

export { SafePipeModule, SafePipe as Éµa };
//# sourceMappingURL=safe-pipe.js.map
